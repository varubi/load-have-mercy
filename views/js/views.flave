class views{
	view results{
		@{
			this.chartData = [];
		}
		<div class="content-head">Results</div>
			<div class="content-body">
			<div id="graphs"></div>
			<table>
			<thead>
			<tr>
				<th>Status</th>
				<th>HTTPS</th>
				<th>URL</th>
				<th>TTFB</th>
				<th>DL</th>
				<th>Total</th>
				<th>Size</th>
				<th>Speed</th>
				<th>Parse Time</th>
				</tr>
			</thead>
			<tbody>
				@for(var i = 0; i < Math.min(1000, data.length); i++) {
					@{
						var rep = data[i];
						var dl = Math.max(1, rep.time - rep.ttfb);
						var r = Math.ceil(rep.ttfb/10) * 10;
						this.chartData.push([rep.startTime, rep.ttfb, 'http' + (rep.secure?'s':'') + '://' + rep.host + rep.path])
					}
					<tr>
						<td>@(rep.status)</td>
						<td>@((rep.secure?'âœ”':''))</td>
						<td>
							<span class="domain">@(rep.host)</span>
							<span class="path">@(rep.path)</span>
						</td>
						<td>@(rep.ttfb) ms</td>
						<td>@(dl) ms</td>
						<td>@(rep.time) ms</td>
						<td>@(this.bytesize(rep.size))</td>
						<td>@(this.bytesize((rep.size/dl)*1000))/s</td>
						<td>@(rep.parsetime) ms</td>
					</tr>
				}
			</tbody>
			</table>
		</div>
	}
	function bytesize{
		var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
		if (data == 0) return '0 Byte';
		var i = parseInt(Math.floor(Math.log(data) / Math.log(1024)));
		return Math.round(data / Math.pow(1024, i), 2) + ' ' + sizes[i];
	}
}
